{"ast":null,"code":"/*\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPostById } from '../../actions/profile';\n\nconst Post = ({\n  getPostById,\n  profile: { post },\n  match }) => {\n  useEffect(() => {\n    getPostById(match.params.chatId, match.params.postId)\n  }, [])\n\n\n  return <Fragment>\n    <h1>Post</h1>\n  </Fragment>\n\n}\n\n//chat.posts ? <Fragment>\n//<h1>{post.title}</h1>\n//</Fragment> : <h1>Post doesn't exist</h1>\n\nPost.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getPostById })(Post);\n*/\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getChatById } from '../../actions/profile';\n\nconst Post = ({\n  getChatById,\n  profile: {\n    chat\n  },\n  match\n}) => {\n  useEffect(() => {\n    getChatById(match.params.id);\n  }, [getChatById]);\n  chat.posts.find(post => {\n    post.id.toString() === req.params.chatId;\n  });\n};","map":{"version":3,"sources":["/Users/jackgoler/Downloads/quadstr/client/src/components/profile/Post.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Link","getChatById","Post","profile","chat","match","params","id","posts","find","post","toString","req","chatId"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZD,EAAAA,WADY;AAEZE,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF,GAFG;AAGZC,EAAAA;AAHY,CAAD,KAGC;AACZR,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAX;AACD,GAFQ,EAEN,CAACN,WAAD,CAFM,CAAT;AAIAG,EAAAA,IAAI,CAACI,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAI;AACtBA,IAAAA,IAAI,CAACH,EAAL,CAAQI,QAAR,OAAuBC,GAAG,CAACN,MAAJ,CAAWO,MAAlC;AACD,GAFD;AAGD,CAXD","sourcesContent":["/*\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPostById } from '../../actions/profile';\n\nconst Post = ({\n  getPostById,\n  profile: { post },\n  match }) => {\n  useEffect(() => {\n    getPostById(match.params.chatId, match.params.postId)\n  }, [])\n\n\n  return <Fragment>\n    <h1>Post</h1>\n  </Fragment>\n\n}\n\n//chat.posts ? <Fragment>\n//<h1>{post.title}</h1>\n//</Fragment> : <h1>Post doesn't exist</h1>\n\nPost.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getPostById })(Post);\n*/\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getChatById } from '../../actions/profile';\n\nconst Post = ({\n  getChatById,\n  profile: { chat },\n  match }) => {\n  useEffect(() => {\n    getChatById(match.params.id)\n  }, [getChatById])\n\n  chat.posts.find(post => {\n    post.id.toString() === req.params.chatId\n  })\n}"]},"metadata":{},"sourceType":"module"}