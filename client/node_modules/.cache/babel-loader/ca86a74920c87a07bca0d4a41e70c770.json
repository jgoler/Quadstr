{"ast":null,"code":"var _jsxFileName = \"/Users/jackgoler/Downloads/quadstr/client/src/components/profile/Post.js\";\n\n/*\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPostById } from '../../actions/profile';\n\nconst Post = ({\n  getPostById,\n  profile: { post },\n  match }) => {\n  useEffect(() => {\n    getPostById(match.params.chatId, match.params.postId)\n  }, [])\n\n\n  return <Fragment>\n    <h1>Post</h1>\n  </Fragment>\n\n}\n\n//chat.posts ? <Fragment>\n//<h1>{post.title}</h1>\n//</Fragment> : <h1>Post doesn't exist</h1>\n\nPost.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getPostById })(Post);\n*/\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getChatById } from '../../actions/profile';\n\nconst Post = ({\n  getChatById,\n  profile: {\n    chat\n  },\n  match\n}) => {\n  useEffect(() => {\n    getChatById(match.params.chatId);\n  }, [getChatById]);\n  /*\n  const post = chat.posts.find(post => {\n    post.id.toString() === match.params.postId\n  })\n  */\n  //console.log(chat.title);\n\n  let post;\n  return chat ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, post = chat.posts.find(post => post._id.toString() === match.params.postId), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, post.title)) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"Loading...\");\n  console.log(post);\n};\n\nPost.propTypes = {\n  getChatById: PropTypes.func.isRequired,\n  chat: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getChatById\n})(Post);","map":{"version":3,"sources":["/Users/jackgoler/Downloads/quadstr/client/src/components/profile/Post.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Link","getChatById","Post","profile","chat","match","params","chatId","post","posts","find","_id","toString","postId","title","console","log","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZD,EAAAA,WADY;AAEZE,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF,GAFG;AAGZC,EAAAA;AAHY,CAAD,KAGC;AACZR,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAX;AACD,GAFQ,EAEN,CAACN,WAAD,CAFM,CAAT;AAKA;;;;;AAKA;;AACA,MAAIO,IAAJ;AACA,SAAOJ,IAAI,gBAAG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACXI,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAWC,IAAX,CAAgBF,IAAI,IAAIA,IAAI,CAACG,GAAL,CAASC,QAAT,OAAwBP,KAAK,CAACC,MAAN,CAAaO,MAA7D,CADI,eAEZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAI,CAACM,KAAV,CAFY,CAAH,gBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHd;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACD,CArBD;;AAuBAN,IAAI,CAACe,SAAL,GAAiB;AACfhB,EAAAA,WAAW,EAAEH,SAAS,CAACoB,IAAV,CAAeC,UADb;AAEff,EAAAA,IAAI,EAAEN,SAAS,CAACsB,MAAV,CAAiBD;AAFR,CAAjB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChCnB,EAAAA,OAAO,EAAEmB,KAAK,CAACnB;AADiB,CAAL,CAA7B;;AAIA,eAAeJ,OAAO,CAACsB,eAAD,EAAkB;AAAEpB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,IAA1C,CAAf","sourcesContent":["/*\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPostById } from '../../actions/profile';\n\nconst Post = ({\n  getPostById,\n  profile: { post },\n  match }) => {\n  useEffect(() => {\n    getPostById(match.params.chatId, match.params.postId)\n  }, [])\n\n\n  return <Fragment>\n    <h1>Post</h1>\n  </Fragment>\n\n}\n\n//chat.posts ? <Fragment>\n//<h1>{post.title}</h1>\n//</Fragment> : <h1>Post doesn't exist</h1>\n\nPost.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getPostById })(Post);\n*/\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getChatById } from '../../actions/profile';\n\nconst Post = ({\n  getChatById,\n  profile: { chat },\n  match }) => {\n  useEffect(() => {\n    getChatById(match.params.chatId)\n  }, [getChatById])\n\n\n  /*\n  const post = chat.posts.find(post => {\n    post.id.toString() === match.params.postId\n  })\n  */\n  //console.log(chat.title);\n  let post;\n  return chat ? <Fragment>\n    {post = chat.posts.find(post => post._id.toString() === match.params.postId)}\n    <h1>{post.title}</h1>\n  </Fragment> : <p>Loading...</p>\n  console.log(post);\n}\n\nPost.propTypes = {\n  getChatById: PropTypes.func.isRequired,\n  chat: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n})\n\nexport default connect(mapStateToProps, { getChatById })(Post);"]},"metadata":{},"sourceType":"module"}