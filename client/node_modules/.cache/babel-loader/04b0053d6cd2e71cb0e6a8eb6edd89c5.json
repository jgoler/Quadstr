{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { CREATE_SUCCESS, CREATE_FAIL, GET_PROFILE, PROFILE_ERROR, USER_LOADED, AUTH_ERROR, JOIN_SUCCESS, JOIN_FAIL, POST_SUCCESS, POST_FAIL } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n/* \n// Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n// Add post\n\nexport const addPost = (formData, chatId) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //const body = JSON.stringify({ title, text });\n\n  try {\n    await axios.post(`/api/chats/${chatId}`, formData, config);\n    dispatch({\n      //type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create Chat\n\nexport const createChat = ({\n  title,\n  password,\n  password2\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    title,\n    password,\n    password2\n  });\n\n  try {\n    const res = await axios.post('/api/chats', body, config);\n    dispatch({\n      type: CREATE_SUCCESS,\n      payload: res.data\n    }); // dispatch(loadUser());\n    //dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL\n    });\n  }\n};\n/*\n// Join Chat\n// Login User\nexport const joinChat = ({code, password}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ code, password });\n\n  try {\n    const res = await axios.put('/api/chats', body, config);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    //dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL\n    });\n  }\n};\n*/\n\n/*\n// Join Chat\nexport const joinChat = (formData, history) => async dispatch => {\n  try {\n    const res = await axios.put('/api/chats', formData);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n\n/*\n// Join Chat\nexport const joinChat = ( formData, history ) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ code, password });\n\n  try {\n    const res = await axios.put('/api/chats', body, config);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n\n    // dispatch(loadUser());\n    //dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL\n    });\n  }\n}\n*/\n// Join Chat\n\nexport const joinChat = (formData, history) => async dispatch => {\n  try {\n    const res = await axios.put('/api/chats', formData);\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(setAlert('Chat Joined', 'success'));\n    history.push('/profile');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/jackgoler/Downloads/quadstr/client/src/actions/chat.js"],"names":["axios","setAlert","CREATE_SUCCESS","CREATE_FAIL","GET_PROFILE","PROFILE_ERROR","USER_LOADED","AUTH_ERROR","JOIN_SUCCESS","JOIN_FAIL","POST_SUCCESS","POST_FAIL","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","addPost","formData","chatId","config","headers","post","POST_ERROR","msg","response","statusText","status","createChat","title","password","password2","body","JSON","stringify","errors","forEach","error","joinChat","history","put","push"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  CREATE_SUCCESS,\n  CREATE_FAIL,\n  GET_PROFILE,\n  PROFILE_ERROR,\n  USER_LOADED,\n  AUTH_ERROR,\n  JOIN_SUCCESS,\n  JOIN_FAIL,\n  POST_SUCCESS,\n  POST_FAIL\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}\n\n/* \n// Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n// Add post\nexport const addPost = (formData, chatId) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  //const body = JSON.stringify({ title, text });\n\n  try {\n    await axios.post(`/api/chats/${chatId}`, formData, config);\n\n    dispatch({\n      //type: ADD_POST,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n// Create Chat\nexport const createChat = ({ title, password, password2 }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ title, password, password2 });\n\n  try {\n    const res = await axios.post('/api/chats', body, config);\n\n    dispatch({\n      type: CREATE_SUCCESS,\n      payload: res.data\n    });\n\n\n\n    // dispatch(loadUser());\n    //dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL\n    });\n  }\n}\n/*\n// Join Chat\n// Login User\nexport const joinChat = ({code, password}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ code, password });\n\n  try {\n    const res = await axios.put('/api/chats', body, config);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    //dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL\n    });\n  }\n};\n*/\n\n/*\n// Join Chat\nexport const joinChat = (formData, history) => async dispatch => {\n  try {\n    const res = await axios.put('/api/chats', formData);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n/*\n// Join Chat\nexport const joinChat = ( formData, history ) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ code, password });\n\n  try {\n    const res = await axios.put('/api/chats', body, config);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    history.push('/profile');\n\n    // dispatch(loadUser());\n    //dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL\n    });\n  }\n}\n*/\n\n// Join Chat\nexport const joinChat = (formData, history) => async dispatch => {\n  try {\n    const res = await axios.put('/api/chats', formData);\n\n    dispatch({\n      type: JOIN_SUCCESS,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Chat Joined', 'success'));\n\n    history.push('/profile');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOIN_FAIL,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}