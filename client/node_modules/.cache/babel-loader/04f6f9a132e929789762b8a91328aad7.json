{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { CREATE_SUCCESS, CREATE_FAIL, GET_PROFILE, PROFILE_ERROR, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n/* \n// Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n// Create Chat\n\nexport const createChat = ({\n  title,\n  password,\n  password2\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    title,\n    password,\n    password2\n  });\n\n  try {\n    const res = await axios.post('/api/chats', body, config);\n    /*dispatch({\n      type: CREATE_SUCCESS,\n      payload: res.data\n    });*/\n\n    dispatch(loadUser());\n    dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/jackgoler/Downloads/quadstr/client/src/actions/chat.js"],"names":["axios","setAlert","CREATE_SUCCESS","CREATE_FAIL","GET_PROFILE","PROFILE_ERROR","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","createChat","title","password","password2","config","headers","body","JSON","stringify","post","getCurrentProfile","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,cADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,WALF,EAMEC,UANF,QAOO,SAPP;AAQA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACD;;AAED,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,WAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAET,WADC;AAEPU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;AAGD;AACF,CAjBM;AAmBP;;;;;;;;;;;;;;;;;;AAmBA;;AACA,OAAO,MAAMY,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAD,KAAoC,MAAMZ,QAAN,IAAkB;AAC9E,QAAMa,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMT,GAAG,GAAG,MAAMb,KAAK,CAAC4B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AAEA;;;;;AAIAb,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AAEAC,IAAAA,QAAQ,CAACmB,iBAAiB,EAAlB,CAAR;AACD,GAVD,CAUE,OAAOX,GAAP,EAAY;AACZ,UAAMY,MAAM,GAAGZ,GAAG,CAACa,QAAJ,CAAad,IAAb,CAAkBa,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIvB,QAAQ,CAACT,QAAQ,CAACgC,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDxB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAGD;AACF,CA9BM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  CREATE_SUCCESS,\n  CREATE_FAIL,\n  GET_PROFILE,\n  PROFILE_ERROR,\n  USER_LOADED,\n  AUTH_ERROR\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}\n\n/* \n// Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n*/\n\n// Create Chat\nexport const createChat = ({ title, password, password2 }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ title, password, password2 });\n\n  try {\n    const res = await axios.post('/api/chats', body, config);\n\n    /*dispatch({\n      type: CREATE_SUCCESS,\n      payload: res.data\n    });*/\n    dispatch(loadUser());\n\n    dispatch(getCurrentProfile());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CREATE_FAIL\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}