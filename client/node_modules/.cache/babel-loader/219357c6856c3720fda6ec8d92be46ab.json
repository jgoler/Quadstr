{"ast":null,"code":"var _jsxFileName = \"/Users/jackgoler/Desktop/quadstr/client/src/components/profile/Post.js\";\n\n/*\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPostById } from '../../actions/profile';\n\nconst Post = ({\n  getPostById,\n  profile: { post },\n  match }) => {\n  useEffect(() => {\n    getPostById(match.params.chatId, match.params.postId)\n  }, [])\n\n\n  return <Fragment>\n    <h1>Post</h1>\n  </Fragment>\n\n}\n\n//chat.posts ? <Fragment>\n//<h1>{post.title}</h1>\n//</Fragment> : <h1>Post doesn't exist</h1>\n\nPost.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getPostById })(Post);\n*/\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getChatById } from '../../actions/profile';\n\nconst Post = ({\n  getChatById,\n  profile: {\n    chat\n  },\n  match\n}) => {\n  useEffect(() => {\n    getChatById(match.params.chatId);\n  }, [getChatById, match.params.chatId]);\n  /*\n  const post = chat.posts.find(post => {\n    post.id.toString() === match.params.postId\n  })\n  */\n  //console.log(chat.title);\n\n  /*\n  let post;\n  return chat ? <Fragment>\n    {post = chat.posts.find(post => post._id.toString() === match.params.postId)}\n    <h1>{post.title}</h1>\n    <h1>Test</h1>\n  </Fragment> : <p>Loading...</p>\n  */\n\n  if (!chat) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \"Loading...\");\n  const post = chat.posts.find(post => post._id.toString() === match.params.postId);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profilge bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, post.title)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, post.text)), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, \"Comments:\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }), post.comments.length > 0 ? post.comments.map(comment => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile bg-light\",\n    key: comment._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, comment.text)))) : /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 10\n    }\n  }, \"No comments\"));\n};\n\nPost.propTypes = {\n  getChatById: PropTypes.func.isRequired,\n  chat: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getChatById\n})(Post);","map":{"version":3,"sources":["/Users/jackgoler/Desktop/quadstr/client/src/components/profile/Post.js"],"names":["React","Fragment","useEffect","PropTypes","connect","getChatById","Post","profile","chat","match","params","chatId","post","posts","find","_id","toString","postId","title","text","comments","length","map","comment","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,MAAMC,IAAI,GAAG,CAAC;AACZD,EAAAA,WADY;AAEZE,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF,GAFG;AAGZC,EAAAA;AAHY,CAAD,KAGC;AACZP,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAX;AACD,GAFQ,EAEN,CAACN,WAAD,EAAcI,KAAK,CAACC,MAAN,CAAaC,MAA3B,CAFM,CAAT;AAKA;;;;;AAKA;;AACA;;;;;;;;;AAQA,MAAI,CAACH,IAAL,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,QAAMI,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAWC,IAAX,CAAgBF,IAAI,IAC/BA,IAAI,CAACG,GAAL,CAASC,QAAT,OAAwBP,KAAK,CAACC,MAAN,CAAaO,MAD1B,CAAb;AAGA,sBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACL;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,IAAI,CAACM,KAAV,CADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,IAAI,CAACO,IADR,CAJF,CADK,eASL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBATK,eAUL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVK,eAWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXK,EAYJP,IAAI,CAACQ,QAAL,CAAcC,MAAd,GAAuB,CAAvB,GAA2BT,IAAI,CAACQ,QAAL,CAAcE,GAAd,CAAkBC,OAAO,iBACnD;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,GAAG,EAAEA,OAAO,CAACR,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,OAAO,CAACJ,IADX,CADF,CADF,CAD0B,CAA3B,gBAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBApBA,CAAP;AAuBD,CAnDD;;AAqDAb,IAAI,CAACkB,SAAL,GAAiB;AACfnB,EAAAA,WAAW,EAAEF,SAAS,CAACsB,IAAV,CAAeC,UADb;AAEflB,EAAAA,IAAI,EAAEL,SAAS,CAACwB,MAAV,CAAiBD;AAFR,CAAjB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChCtB,EAAAA,OAAO,EAAEsB,KAAK,CAACtB;AADiB,CAAL,CAA7B;;AAIA,eAAeH,OAAO,CAACwB,eAAD,EAAkB;AAAEvB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,IAA1C,CAAf","sourcesContent":["/*\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPostById } from '../../actions/profile';\n\nconst Post = ({\n  getPostById,\n  profile: { post },\n  match }) => {\n  useEffect(() => {\n    getPostById(match.params.chatId, match.params.postId)\n  }, [])\n\n\n  return <Fragment>\n    <h1>Post</h1>\n  </Fragment>\n\n}\n\n//chat.posts ? <Fragment>\n//<h1>{post.title}</h1>\n//</Fragment> : <h1>Post doesn't exist</h1>\n\nPost.propTypes = {\n  getPostById: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getPostById })(Post);\n*/\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getChatById } from '../../actions/profile';\n\nconst Post = ({\n  getChatById,\n  profile: { chat },\n  match }) => {\n  useEffect(() => {\n    getChatById(match.params.chatId)\n  }, [getChatById, match.params.chatId])\n\n\n  /*\n  const post = chat.posts.find(post => {\n    post.id.toString() === match.params.postId\n  })\n  */\n  //console.log(chat.title);\n  /*\n  let post;\n  return chat ? <Fragment>\n    {post = chat.posts.find(post => post._id.toString() === match.params.postId)}\n    <h1>{post.title}</h1>\n    <h1>Test</h1>\n  </Fragment> : <p>Loading...</p>\n  */\n  if (!chat) return <p>Loading...</p>;\n\n  const post = chat.posts.find(post =>\n    post._id.toString() === match.params.postId);\n\n  return <Fragment>\n    <div className=\"profilge bg-light\">\n      <div>\n        <h2>{post.title}</h2>\n      </div>\n      <div>\n        {post.text}\n      </div>\n    </div>\n    <h2>Comments:</h2>\n    <br />\n    <br />\n    {post.comments.length > 0 ? post.comments.map(comment => (\n      <div className=\"profile bg-light\" key={comment._id}>\n        <div>\n          <h4>\n            {comment.text}\n          </h4>\n        </div>\n      </div>\n    )) : <h4>No comments</h4>}\n  </Fragment>\n\n}\n\nPost.propTypes = {\n  getChatById: PropTypes.func.isRequired,\n  chat: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n})\n\nexport default connect(mapStateToProps, { getChatById })(Post);"]},"metadata":{},"sourceType":"module"}